/**
 * Gkeep API
 * Gkeep API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GkeepApi);
  }
}(this, function(expect, GkeepApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GkeepApi.UserProfile();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserProfile', function() {
    it('should create an instance of UserProfile', function() {
      // uncomment below and update the code to test UserProfile
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be.a(GkeepApi.UserProfile);
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property roles (base name: "roles")', function() {
      // uncomment below and update the code to test the property roles
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property firstname (base name: "firstname")', function() {
      // uncomment below and update the code to test the property firstname
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property lastname (base name: "lastname")', function() {
      // uncomment below and update the code to test the property lastname
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property phone (base name: "phone")', function() {
      // uncomment below and update the code to test the property phone
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parent_id")', function() {
      // uncomment below and update the code to test the property parentId
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property association (base name: "association")', function() {
      // uncomment below and update the code to test the property association
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property company (base name: "company")', function() {
      // uncomment below and update the code to test the property company
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property companyShortName (base name: "company_short_name")', function() {
      // uncomment below and update the code to test the property companyShortName
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property contract (base name: "contract")', function() {
      // uncomment below and update the code to test the property contract
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property externalCompany (base name: "external_company")', function() {
      // uncomment below and update the code to test the property externalCompany
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property navSystemAccessData (base name: "nav_system_access_data")', function() {
      // uncomment below and update the code to test the property navSystemAccessData
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property lang (base name: "lang")', function() {
      // uncomment below and update the code to test the property lang
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property navSystem (base name: "nav_system")', function() {
      // uncomment below and update the code to test the property navSystem
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property notifyByEmail (base name: "notify_by_email")', function() {
      // uncomment below and update the code to test the property notifyByEmail
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property notifyBySms (base name: "notify_by_sms")', function() {
      // uncomment below and update the code to test the property notifyBySms
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property notifyTimezone (base name: "notify_timezone")', function() {
      // uncomment below and update the code to test the property notifyTimezone
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property partnerType (base name: "partner_type")', function() {
      // uncomment below and update the code to test the property partnerType
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property isTermsAccepted (base name: "is_terms_accepted")', function() {
      // uncomment below and update the code to test the property isTermsAccepted
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property geoLocalizationSettings (base name: "geo_localization_settings")', function() {
      // uncomment below and update the code to test the property geoLocalizationSettings
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

    it('should have the property apiToken (base name: "api_token")', function() {
      // uncomment below and update the code to test the property apiToken
      //var instane = new GkeepApi.UserProfile();
      //expect(instance).to.be();
    });

  });

}));
