/**
 * Gkeep API
 * Gkeep API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import AlertList from '../model/AlertList';
import AlertsStatus from '../model/AlertsStatus';
import CreateProfile from '../model/CreateProfile';
import CreateVehicleCategory from '../model/CreateVehicleCategory';
import FleetStatus from '../model/FleetStatus';
import FrameHistory from '../model/FrameHistory';
import NotificationSettings from '../model/NotificationSettings';
import RefuelsList from '../model/RefuelsList';
import StopppedConsumptionList from '../model/StopppedConsumptionList';
import UpdateNotificationSettings from '../model/UpdateNotificationSettings';
import UpdateProfile from '../model/UpdateProfile';
import UpdateVehicle from '../model/UpdateVehicle';
import UpdateVehicleCategory from '../model/UpdateVehicleCategory';
import UserLevel from '../model/UserLevel';
import UserProfile from '../model/UserProfile';
import UserProfileList from '../model/UserProfileList';
import Vehicle from '../model/Vehicle';
import VehicleCategory from '../model/VehicleCategory';
import VehicleCategoryList from '../model/VehicleCategoryList';
import VehicleDailyStats from '../model/VehicleDailyStats';
import VehicleList from '../model/VehicleList';
import VehicleMaintenance from '../model/VehicleMaintenance';
import VehicleStatus from '../model/VehicleStatus';

/**
* V2 service.
* @module api/V2Api
* @version 1.0.0
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createUserProfile operation.
     * @callback module:api/V2Api~createUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user profile
     * @param {module:api/V2Api~createUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfile}
     */
    createUserProfile(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/user-profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createVehicleCategory operation.
     * @callback module:api/V2Api~createVehicleCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create vehicle category
     * @param {module:api/V2Api~createVehicleCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleCategory}
     */
    createVehicleCategory(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VehicleCategory;

      return this.apiClient.callApi(
        '/api/v2/vehicles/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUserProfile operation.
     * @callback module:api/V2Api~deleteUserProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user profile
     * @param {module:api/V2Api~deleteUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserProfile(profileId, callback) {
      let postBody = null;

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/{profileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteVehicleCategory operation.
     * @callback module:api/V2Api~deleteVehicleCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete vehicle category
     * @param {module:api/V2Api~deleteVehicleCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVehicleCategory(categoryId, callback) {
      let postBody = null;

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/v2/vehicles/categories/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the enableVehicleMaintenance operation.
     * @callback module:api/V2Api~enableVehicleMaintenanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vehicle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable vehicle maintenance mode
     * @param {module:api/V2Api~enableVehicleMaintenanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vehicle}
     */
    enableVehicleMaintenance(vehicleId, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vehicle;

      return this.apiClient.callApi(
        '/api/v2/vehicles/maintenance/{vehicleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlertList operation.
     * @callback module:api/V2Api~getAlertListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alerts
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getAlertListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertList}
     */
    getAlertList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[created][date_start]': opts['filterCreatedDateStart'],
        'filter[created][date_end]': opts['filterCreatedDateEnd'],
        'filter[code_special]': opts['filterCodeSpecial']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = AlertList;

      return this.apiClient.callApi(
        '/api/v2/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlertsStatus operation.
     * @callback module:api/V2Api~getAlertsStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alerts status
     * @param {module:api/V2Api~getAlertsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsStatus}
     */
    getAlertsStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = AlertsStatus;

      return this.apiClient.callApi(
        '/api/v2/alerts/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCurrentUserProfile operation.
     * @callback module:api/V2Api~getCurrentUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user profile
     * @param {module:api/V2Api~getCurrentUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfile}
     */
    getCurrentUserProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/user-profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getFleetStatus operation.
     * @callback module:api/V2Api~getFleetStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FleetStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fleet status
     * @param {module:api/V2Api~getFleetStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FleetStatus}
     */
    getFleetStatus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = FleetStatus;

      return this.apiClient.callApi(
        '/api/v2/fleet/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNotificationSettings operation.
     * @callback module:api/V2Api~getNotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get notification settings
     * @param {module:api/V2Api~getNotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettings}
     */
    getNotificationSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationSettings;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/notification-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRelatedUserProfiles operation.
     * @callback module:api/V2Api~getRelatedUserProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfileList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get related user-profiles
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getRelatedUserProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfileList}
     */
    getRelatedUserProfiles(levelName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'levelName': levelName
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfileList;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/{levelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserProfile operation.
     * @callback module:api/V2Api~getUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user-profiles
     * @param {module:api/V2Api~getUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfile}
     */
    getUserProfile(profileId, callback) {
      let postBody = null;

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/{profileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehicleCategory operation.
     * @callback module:api/V2Api~getVehicleCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicle category
     * @param {module:api/V2Api~getVehicleCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleCategory}
     */
    getVehicleCategory(categoryId, callback) {
      let postBody = null;

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VehicleCategory;

      return this.apiClient.callApi(
        '/api/v2/vehicles/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehicleCategoryList operation.
     * @callback module:api/V2Api~getVehicleCategoryListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleCategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicle category list
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getVehicleCategoryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleCategoryList}
     */
    getVehicleCategoryList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VehicleCategoryList;

      return this.apiClient.callApi(
        '/api/v2/vehicles/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehicleStatus operation.
     * @callback module:api/V2Api~getVehicleStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicle status
     * @param {module:api/V2Api~getVehicleStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleStatus}
     */
    getVehicleStatus(vehicleId, callback) {
      let postBody = null;

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = VehicleStatus;

      return this.apiClient.callApi(
        '/api/v2/vehicles/{vehicleId}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehicles operation.
     * @callback module:api/V2Api~getVehiclesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicles
     * @param {module:api/V2Api~getVehiclesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleList}
     */
    getVehicles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = VehicleList;

      return this.apiClient.callApi(
        '/api/v2/vehicles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehiclesDailyStats operation.
     * @callback module:api/V2Api~getVehiclesDailyStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleDailyStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicles daily statistics
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getVehiclesDailyStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleDailyStats}
     */
    getVehiclesDailyStats(vehicleId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
        'filters[started_at]': opts['filtersStartedAt'],
        'filters[ended_at]': opts['filtersEndedAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = VehicleDailyStats;

      return this.apiClient.callApi(
        '/api/v2/vehicles/{vehicleId}/daily-statistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehiclesFrameHistory operation.
     * @callback module:api/V2Api~getVehiclesFrameHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrameHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicles frame-history
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getVehiclesFrameHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrameHistory}
     */
    getVehiclesFrameHistory(vehicleId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
        'filters[started_at]': opts['filtersStartedAt'],
        'filters[ended_at]': opts['filtersEndedAt'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrameHistory;

      return this.apiClient.callApi(
        '/api/v2/vehicles/{vehicleId}/frame-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehiclesRefuels operation.
     * @callback module:api/V2Api~getVehiclesRefuelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefuelsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicles refuels
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getVehiclesRefuelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefuelsList}
     */
    getVehiclesRefuels(vehicleId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
        'filters[started_at]': opts['filtersStartedAt'],
        'filters[ended_at]': opts['filtersEndedAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefuelsList;

      return this.apiClient.callApi(
        '/api/v2/vehicles/{vehicleId}/refuels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVehiclesStoppedConsumptions operation.
     * @callback module:api/V2Api~getVehiclesStoppedConsumptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopppedConsumptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get vehicles stopped-consumptions
     * @param {Object} opts Optional parameters
     * @param {module:api/V2Api~getVehiclesStoppedConsumptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopppedConsumptionList}
     */
    getVehiclesStoppedConsumptions(vehicleId, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
        'filters[started_at]': opts['filtersStartedAt'],
        'filters[ended_at]': opts['filtersEndedAt'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopppedConsumptionList;

      return this.apiClient.callApi(
        '/api/v2/vehicles/{vehicleId}/stopped-consumptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the refreshApiToken operation.
     * @callback module:api/V2Api~refreshApiTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh api token
     * @param {module:api/V2Api~refreshApiTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfile}
     */
    refreshApiToken(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/tokens/refresh', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateNotificationSettings operation.
     * @callback module:api/V2Api~updateNotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update notification settings
     * @param {module:api/V2Api~updateNotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSettings}
     */
    updateNotificationSettings(opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationSettings;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/notification-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateUserProfile operation.
     * @callback module:api/V2Api~updateUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user profile
     * @param {module:api/V2Api~updateUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProfile}
     */
    updateUserProfile(profileId, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'profileId': profileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserProfile;

      return this.apiClient.callApi(
        '/api/v2/user-profiles/{profileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateVehicle operation.
     * @callback module:api/V2Api~updateVehicleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vehicle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update vehicle
     * @param {module:api/V2Api~updateVehicleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vehicle}
     */
    updateVehicle(vehicleId, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'vehicleId': vehicleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vehicle;

      return this.apiClient.callApi(
        '/api/v2/vehicles/{vehicleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateVehicleCategory operation.
     * @callback module:api/V2Api~updateVehicleCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VehicleCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update vehicle category
     * @param {module:api/V2Api~updateVehicleCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VehicleCategory}
     */
    updateVehicleCategory(categoryId, opts, callback) {
      let postBody = opts['body'];

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VehicleCategory;

      return this.apiClient.callApi(
        '/api/v2/vehicles/categories/{categoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
